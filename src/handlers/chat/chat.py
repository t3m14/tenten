import datetime
from aiogram import Router
import random

router: Router = Router(name=__name__)

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from src.states.states import ChatStates
MAX_USERS = 2
CHAT_DURATION = 10  # 10 minutes in seconds

#TODO –í—ã–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
chat_rooms = {}

ANIMAL_EMOJIS = ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ']

@router.message(F.text == "–ü–æ–∏—Å–∫")
async def cmd_start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã", callback_data="search_room")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã.", reply_markup=kb.as_markup())

@router.callback_query(F.data == "search_room")
async def search_room(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
    for room in chat_rooms.values():
        if user_id in room['users']:
            await callback.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã.")
            return
    
    for room_id, room in chat_rooms.items():
        if len(room['users']) < MAX_USERS:
            emoji = random.choice([e for e in ANIMAL_EMOJIS if e not in room['emojis'].values()])
            room['users'].append(user_id)
            room['emojis'][user_id] = emoji
            await state.set_state(ChatStates.waiting)
            await state.update_data(room_id=room_id, emoji=emoji)
            kb = InlineKeyboardBuilder()
            kb.button(text="–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã", callback_data=f"leave_room:{room_id}")
            await callback.message.edit_text(f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}. –í–∞—à –∞–≤–∞—Ç–∞—Ä: {emoji}. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞.", reply_markup=kb.as_markup())
            
            if len(room['users']) == MAX_USERS:
                await start_chat(room_id, callback, state)
            return

    new_room_id = len(chat_rooms) + 1
    emoji = random.choice(ANIMAL_EMOJIS)
    chat_rooms[new_room_id] = {'users': [user_id], 'messages': [], 'emojis': {user_id: emoji}}
    await state.set_state(ChatStates.waiting)
    await state.update_data(room_id=new_room_id, emoji=emoji)
    kb = InlineKeyboardBuilder()
    kb.button(text="–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã", callback_data=f"leave_room:{new_room_id}")
    await callback.message.edit_text(f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É {new_room_id}. –í–∞—à –∞–≤–∞—Ç–∞—Ä: {emoji}. –û–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("leave_room:"))
async def leave_room(callback: types.CallbackQuery, state: FSMContext):
    room_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    if room_id in chat_rooms and user_id in chat_rooms[room_id]['users']:
        chat_rooms[room_id]['users'].remove(user_id)
        del chat_rooms[room_id]['emojis'][user_id]
        
        if len(chat_rooms[room_id]['users']) == 0:
            del chat_rooms[room_id]
        
        await state.clear()
        # TODO –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞, –∫–æ–≥–¥–∞ –æ–Ω –Ω–∞—á–∞–ª—Å—è (—á–µ—Ä–µ–∑ /start)
        await callback.message.edit_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–µ–π.")

async def start_chat(room_id, callback, state):
    room = chat_rooms[room_id]

    for user_id in room['users']:
        user_state = FSMContext(state.storage, user_id)
        await user_state.set_state(ChatStates.chatting)

        await user_state.update_data(room_id=room_id)
        await callback.bot.send_message(user_id, "–ß–∞—Ç –Ω–∞—á–∞–ª—Å—è! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start")

    await asyncio.sleep(CHAT_DURATION)
    
    for user_id in room['users']:
        # TODO –°–¥–µ–ª–∞—Ç—å –ª–∞–π–∫–∏
        await callback.bot.send_message(user_id, "–í—Ä–µ–º—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ—Ä–∞ —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏!")
    
    del chat_rooms[room_id]

@router.message()
async def handle_chat_message(message: types.Message, state: FSMContext):
    # TODO –°–¥–µ–ª–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    state = FSMContext(state.storage, message.from_user.id)

    if await state.get_state() == ChatStates.chatting:
        data = await state.get_data()

        room_id = data['room_id']
        if not chat_rooms:
            return
        room = chat_rooms[room_id]
        
        sender_emoji = room['emojis'][message.from_user.id]

        for user_id in room['users']:
            if user_id != message.from_user.id:
                # TODO –°–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω—ã–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                await message.bot.send_message(user_id, f"{sender_emoji}: \n {message.text}")

        room['messages'].append((message.from_user.id, message.text))